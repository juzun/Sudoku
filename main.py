import backtrack
import crook
import bestfirstsearch
import time

def print_grid(grid):
    for i in range(9):
        if i==0:
            print("┌───────┬───────┬───────┐")
        if i==3 or i==6:
            print("├───────┼───────┼───────┤")
        print("│ {} {} {} │ {} {} {} │ {} {} {} │".format(*grid[i]))
        if i==8:
            print("└───────┴───────┴───────┘")


grid1 =[[5,3,0,0,7,0,0,0,0],
        [6,0,0,1,9,5,0,0,0],
        [0,9,8,0,0,0,0,6,0],
        [8,0,0,0,6,0,0,0,3],
        [4,0,0,8,0,3,0,0,1],
        [7,0,0,0,2,0,0,0,6],
        [0,6,0,0,0,0,2,8,0],
        [0,0,0,4,1,9,0,0,5],
        [0,0,0,0,8,0,0,7,9]]
grid1_sol = [[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]

grid2 =[[5,1,7,6,0,0,0,3,4],
        [2,8,9,0,0,4,0,0,0],
        [3,4,6,2,0,5,0,9,0],
        [6,0,2,0,0,0,0,1,0],
        [0,3,8,0,0,6,0,4,7],
        [0,0,0,0,0,0,0,0,0],
        [0,9,0,0,0,0,0,7,8],
        [7,0,3,4,0,0,5,6,0],
        [0,0,0,0,0,0,0,0,0]]
grid2_sol = [[5, 1, 7, 6, 9, 8, 2, 3, 4], [2, 8, 9, 1, 3, 4, 7, 5, 6], [3, 4, 6, 2, 7, 5, 8, 9, 1], [6, 7, 2, 8, 4, 9, 3, 1, 5], [1, 3, 8, 5, 2, 6, 9, 4, 7], [9, 5, 4, 7, 1, 3, 6, 8, 2], [4, 9, 5, 3, 6, 2, 1, 7, 8], [7, 2, 3, 4, 8, 1, 5, 6, 9], [8, 6, 1, 9, 5, 7, 4, 2, 3]]

grid3 =[[5,1,7,6,0,0,0,3,4],
        [0,8,9,0,0,4,0,0,0],
        [3,0,6,2,0,5,0,9,0],
        [6,0,0,0,0,0,0,1,0],
        [0,3,0,0,0,6,0,4,7],
        [0,0,0,0,0,0,0,0,0],
        [0,9,0,0,0,0,0,7,8],
        [7,0,3,4,0,0,5,6,0],
        [0,0,0,0,0,0,0,0,0]]
grid3_sol = [[5, 1, 7, 6, 9, 8, 2, 3, 4], [2, 8, 9, 1, 3, 4, 7, 5, 6], [3, 4, 6, 2, 7, 5, 8, 9, 1], [6, 7, 2, 8, 4, 9, 3, 1, 5], [1, 3, 8, 5, 2, 6, 9, 4, 7], [9, 5, 4, 7, 1, 3, 6, 8, 2], [4, 9, 5, 3, 6, 2, 1, 7, 8], [7, 2, 3, 4, 8, 1, 5, 6, 9], [8, 6, 1, 9, 5, 7, 4, 2, 3]]

zapeklite=[ [8,0,4,2,0,0,3,0,0],
            [0,2,3,0,0,0,8,0,7],
            [0,0,0,0,9,0,0,1,0],
            [7,0,0,0,0,0,0,6,8],
            [0,0,8,0,0,0,9,0,0],
            [9,6,0,0,0,0,0,0,5],
            [0,1,0,0,7,0,0,0,0],
            [5,0,7,0,0,0,6,8,0],
            [0,0,6,0,0,5,2,0,1]]
zapeklite_sol = [[8, 9, 4, 2, 1, 7, 3, 5, 6], [1, 2, 3, 5, 4, 6, 8, 9, 7], [6, 7, 5, 8, 9, 3, 4, 1, 2], [7, 4, 2, 3, 5, 9, 1, 6, 8], [3, 5, 8, 7, 6, 1, 9, 2, 4], [9, 6, 1, 4, 8, 2, 7, 3, 5], [2, 1, 9, 6, 7, 8, 5, 4, 3], [5, 3, 7, 1, 2, 4, 6, 8, 9], [4, 8, 6, 9, 3, 5, 2, 7, 1]]

s107 = [[2,0,0,1,5,4,0,8,0],
        [5,0,6,0,0,8,0,0,0],
        [0,0,0,6,0,3,0,0,0],
        [0,9,0,5,0,0,0,0,0],
        [0,0,7,0,0,0,4,0,0],
        [0,0,0,0,0,6,0,0,1],
        [8,0,5,2,3,0,1,0,6],
        [0,0,0,0,8,0,0,0,9],
        [0,0,0,0,0,0,0,0,3]]
s107_sol = [[2, 3, 9, 1, 5, 4, 6, 8, 7], [5, 1, 6, 9, 7, 8, 2, 3, 4], [7, 8, 4, 6, 2, 3, 9, 1, 5], [1, 9, 8, 5, 4, 7, 3, 6, 2], [6, 5, 7, 3, 1, 2, 4, 9, 8], [3, 4, 2, 8, 9, 6, 7, 5, 1], [8, 7, 5, 2, 3, 9, 1, 4, 6], [4, 6, 3, 7, 8, 1, 5, 2, 9], [9, 2, 1, 4, 6, 5, 8, 7, 3]]

s59  = [[0,0,0,0,0,0,0,7,1],
        [0,1,0,0,0,2,9,4,0],
        [0,0,0,0,7,0,0,0,6],
        [0,5,0,0,0,6,0,0,0],
        [0,9,0,0,0,0,7,0,0],
        [2,3,6,0,1,4,0,5,0],
        [0,0,0,0,0,0,0,0,0],
        [0,2,4,6,0,0,3,8,0],
        [3,0,0,0,4,5,6,1,7]]
s59_sol = [[8, 6, 3, 4, 5, 9, 2, 7, 1], [5, 1, 7, 3, 6, 2, 9, 4, 8], [9, 4, 2, 8, 7, 1, 5, 3, 6], [7, 5, 8, 9, 3, 6, 1, 2, 4], [4, 9, 1, 5, 2, 8, 7, 6, 3], [2, 3, 6, 7, 1, 4, 8, 5, 9], [6, 7, 5, 1, 8, 3, 4, 9, 2], [1, 2, 4, 6, 9, 7, 3, 8, 5], [3, 8, 9, 2, 4, 5, 6, 1, 7]]



grid = grid1
grid_sol = grid1_sol

method = "backtrack"
#method = "reverse backtrack"
#method = "backtrack with implications"
#method = "backtrack with forward checking and MRV"
#method = "best first search"
#method = "crook"

start = time.time()

if method == "backtrack":
    backtracks = backtrack.solve(grid, "1")
elif method == "reverse backtrack":
    backtracks = backtrack.solve(grid, "2")
elif method == "backtrack with implications":
    backtracks = backtrack.solve(grid, "3")
elif method == "backtrack with forward checking and MRV":
    backtracks = backtrack.solve(grid, "4")
elif method == "crook":
    crook.solve(grid)
elif method == "best first search":
    grid = bestfirstsearch.solve(grid)

end = time.time() 

print("Solution: ")
print_grid(grid)

print("Solution is correct.") if (grid_sol == grid) else print("Solution is incorrect.")

print("Used method: " + str(method))

if 'backtracks' in locals():
    try:
        print("Number of backtracks: " + str(backtracks))
    except ValueError:
        pass

print("Time: " + str(end-start))
